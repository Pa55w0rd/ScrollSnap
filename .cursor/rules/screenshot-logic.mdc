---
description: 网页截图核心逻辑和算法
---

# 截图功能实现细节

## 截图流程（在 [src/content.js](mdc:src/content.js) 中实现）

### 1. 准备阶段
- 检查是否已在截图中（防止重复执行）
- 创建 Shadow DOM 进度条容器
- 保存原始页面状态（滚动位置、overflow 样式）
- 识别并隐藏所有固定定位元素

### 2. 主要内容截图
```javascript
// 关键步骤：
// 1. 计算页面总高度和需要的截图次数
const viewportSteps = Math.ceil(pageHeight / viewportHeight);

// 2. 处理 Canvas 限制（最大 32767px）
const MAX_CANVAS_HEIGHT = 32767;
const totalSegments = Math.ceil(pageHeight * scale / MAX_CANVAS_HEIGHT);

// 3. 创建多个 Canvas 分段存储
// 4. 逐屏滚动并截图
// 5. 将截图片段绘制到对应的 Canvas
```

### 3. 固定元素处理
- 恢复固定元素可见性
- 滚动到页面顶部
- 单独截取固定元素
- 叠加到第一个 Canvas 的顶部

### 4. 导出和下载
- 将每个 Canvas 转换为 dataURL
- 通过消息发送到 background script
- 使用 `chrome.downloads.download` 保存文件
- 多段时添加 `_part1`, `_part2` 等后缀

### 5. 清理恢复
- 恢复原始滚动位置和样式
- 恢复固定元素原始状态
- 清理 Canvas 内存
- 移除进度条

## 重要函数

### `captureFullPage()`
主截图函数，协调整个截图流程

### `captureVisible()`
截取当前可见区域，包含重试逻辑（最多3次）

### `getFixedElements(progressContainer)`
识别页面中所有固定定位元素（position: fixed 或 sticky）

### `captureScrollableElement(scrollContainer)`
截取局部滚动区域的完整内容，使用 html2canvas 渲染

## 已知限制

1. **Canvas 高度限制**：单个 Canvas 最大 32767px，超过需分段
2. **内存限制**：单个 Canvas 最大约 256MB 像素数据
3. **复杂布局**：某些复杂的 CSS 布局可能截图不完整
4. **动画内容**：动画和视频内容会被截取为静态图片
5. **跨域图片**：跨域图片可能显示为空白（CORS 限制）
